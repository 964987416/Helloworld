启动WebApplication之前 先修改 resource 中的application.properties文件信息 （端口9090）数据库链接信息等 server.port=9090
springboot启动好之后 地址栏输入访问的链接 如 127.0.0.1:9090/hello

断言：
Assert.assertEquals();方法的作用 ：若括号内两者不一致则中断流程 若一致则向下执行

application.properties(注释and代码)：
server.port=9090
spring.datasource.url=jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=create

#hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建	更新	验证数据库表结构,有四个值：

#1.create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#2.create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
#3.update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#4.validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。


#dialect主要是指定生成表名的存储引擎为 InnoDBD
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#sqlshow
spring.jpa.show-sql=true
#format\u4E00\u4E0Bsql\u8FDB\u884C\u8F93\u51FA
spring.jpa.properties.hibernate.format_sql=true


由于某些原因我们想使用自定义的 SQL 来查询，Spring Data 也是完美支持的；在 SQL 的查询方法上面使用@Query注解，如涉及到删除和修改在需要加上@Modifying.也可以根据需要添加 @Transactional对事物的支持，查询超时的设置等。


2019-6-17 学习笔记
/spring-boot-mybatis-annotation

在 /spring-boot-mybatis-annotation/src/main/java/com/neo/MybatisAnnotationApplication.java 文件中 @MapperScan("com.neo.mapper") 的作用是将com.neo.mapper中的所有mapper映射到boot中



@RequestMapping(value="/delete/{id}")
    public void delete(@PathVariable("id") Long id) {
    	System.out.println(id);
    	userMapper.delete(id);
    	
    }
地址栏 http://127.0.0.1:9090/delete/2        删除id为2的user



/spring-boot-thymeleaf
spring-boot 数据--->前端页面

2019/6/24
/SpringBootTestDemo 自测Demo

@RestController注解相当于@ResponseBody＋ @Controller合在一起的作用。
1)如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面或者html页面
配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return里的内容。

2)如果需要返回到指定页面，则需要用@Controller配合视图解析器InternalResourceViewResolver才行。(在application.properties中配置  spring.thymeleaf.cache=false后 页面返回到templates中)

3)如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。


给自建demo配置mybatis时 添加mapperTest时出现的异常
springboot测试时出现：java.lang.IllegalStateException: 
Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test

原因：未在testresource中添加springboot基础启动类导致报错
是因为我没在根目录下写一个springboot的启动类：写个App.class,再在test测试类跑起来就不会出现这个错误了

/spring-boot-jpa-thymeleaf-curd
spring-boot-jpa-thymeleaf-curd 纯洁的微笑springbootDemo 
使用maven打包之后 拿到jar包放到指定位置 本地进入cmd窗口  （F:\springboot-crud.jar）
cmd窗口运行 java -jar F:\springboot-crud.jar

2019/6/25 servlet学习

2.1 接收单一的值(一个参数名对应一个值)
	String name = request.getParameter("name");
	String age = request.getParameter("age");
	System.out.println(name);
	System.out.println(age);
	
2.2 一个参数名对应多个值(比如多选框)
	String[] like = request.getParameterValues("like");
	System.out.println(Arrays.toString(like));

2.3 获得本次传参中的所有参数名
	Enumeration<String> names = request.getParameterNames();
	while(names.hasMoreElements()){
		String str = names.nextElement();
		System.out.println(str);
	}
		打印结果:
		name
		age
		like

2.4 获得本次传参中的所有参数及对应的值
Map<String, String[]> map = request.getParameterMap();
 for(String key:map.keySet()){
	System.out.println(key+" : "+Arrays.toString(map.get(key)));
 }
	打印结果:
	name : [tom]
	age  : [20]
	like : [0, 1]



服务器内部跳转的特点:
1.需要使用request对象来完成
2.服务器内部跳转期间,其实就是把请求request和响应response转发到一下资源中,所以在整个跳转期间所有涉及到的资源使用的都是同一个request和response。(我们可以利用这个特点将来在多个资源之间进行数据的传递)
3.服务器内部跳转,【不会】改变浏览器地址栏中的地址


3.客户端传参过程中,出现中文乱码
	3.1 get方式传参,中文乱码
		需要在tomcat服务器中server.xml文件中进行配置
		在<Connector>中加入新的属性URIEncoding="XXX"
		<Connector URIEncoding="UTF-8" connectionTimeout="20000" port="8989" protocol="HTTP/1.1" redirectPort="8443"/>

	3.2 post方式传参,中文乱码
		在使用request获取参数【之前】,先把request中的编码进行设置
		request.setCharacterEncoding("UTF-8");
		String name = request.getParameter("name");
		System.out.println(name);
	
	3.3 servlet中使用io流写数据到浏览器,浏览器里面显示中文乱码
		http协议规范中响应的格式为:
		1部分 响应状态行
		2部分 响应头部/消息报头
		3部分 \r\n
		4部分 响应正文

		如果响应头部信息中没有设置编码,那么浏览器会默认使用简体中文(GBK)来解析响应中的内容
		
		所以在使用io流之前,需要设置一下response中的编码,同时还要告诉浏览器本次响应内容的编码是什么
		//设置response中的编码为UTF-8
		response.setCharacterEncoding("UTF-8");
		//设置响应头部,告诉浏览器响应内容编码为utf-8
		response.setContentType("text/html;charset=utf-8");

		// /web_servlet  项目名 "/maven02"
		request.getContextPath();

		// /PathServlet 映射路径"/user/checkboxTest"
		request.getServletPath();

		// 地址栏全地址 统一资源定位符  "http://127.0.0.1:9090/maven02/user/checkboxTest" 
		request.getRequestURL();

		// /web_servlet/PathServlet 统一资源标志符  "/maven02/user/checkboxTest"
		request.getRequestURI();
		
Session:

	代码中设置:session.setMaxInactiveInterval(5); 5秒
	
	web.xml中设置:1分钟超时,负数或者0为 不限制时间
		<session-config>  
				<session-timeout>1</session-timeout>  
		</session-config>
	session超时时间是指:客户端不与服务器进行交互的时间		


Application
application对象
	ServletContext被称为应用上下文/servlet上下文
	生命周期:
		启动tomcat服务器的时候,就会被创建
		关闭tomcat服务器的时候,就会被销毁
		而且每个项目在运行期间,都会有且只有一个application对象

作用范围:整个项目在运行期间,只有一个application对象,所以这个对象是所有用户共享的,大家都可以向这个对象里面存值
,也可以再拿出来.因为这个对象一个项目中只有一个.


		过滤器方法 doFilter 
		public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
		FilterChain是一个接口,表示过滤器链,这个接口中只有一个方法
		public interface FilterChain {
			public void doFilter(ServletRequest request, ServletResponse response)throws IOException, ServletException;
		}
		
		doFilter中传的FilterChain chain 参数代表 实现了FilterChain接口的实现类
在web.xml中设置404页面自动跳转到404.html
			<error-page>
				<error-code>404</error-code>
				<location>/404.html</location>
			</error-page>
2019/06/26
事务四大特性

原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。
一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。
隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。
持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。

springboot 定时任务
@Scheduled
每隔5秒执行一次："*/5 * * * * ?"

每隔1分钟执行一次："0 */1 * * * ?"

每天23点执行一次："0 0 23 * * ?"

每天凌晨1点执行一次："0 0 1 * * ?"

每月1号凌晨1点执行一次："0 0 1 1 * ?"

每月最后一天23点执行一次："0 0 23 L * ?"

每周星期天凌晨1点实行一次："0 0 1 ? * L"

在26分、29分、33分执行一次："0 26,29,33 * * * ?"

每天的0点、13点、18点、21点都执行一次："0 0 0,13,18,21 * * ?"

表示在每月的1日的凌晨2点调度任务："0 0 2 1 * ? *"

表示周一到周五每天上午10：15执行作业："0 15 10 ? * MON-FRI" 

表示2002-2006年的每个月的最后一个星期五上午10:15执行："0 15 10 ? 6L 2002-2006"


2019/06/27
SpringBoot获取配置值的两种方式
先在配置文件application.properties中声明配置值 如 
#自定义配置
com.briup.username=moose
com.briup.password=626262 

1、使用@Value()直接取值
在需要取值的controller中
@Value("${com.briup.username}")
String username;
@Value("${com.briup.password}")
String password;

2019/07/01
#string比较
 * string的equals方法 先比较两个字符串长度是否相等 再将字符串分割进行逐一比对  分析源码可知
 * equals比较的是文字内容手否相等 ==比较的是对象在内存堆栈中的地址值，string在内存中先开辟了一段堆栈空间来存储"wdnmd"这个字符串 
 * 后面new的str1 并不会在堆栈中新开辟内存空间 所以str1.equals(str) 而且 str==str1
 * str2声明是在堆栈中重新new的"wdnmd" 所以 equals比较为true ==比较为false 


学习h2内嵌数据库
学习博客：https://blog.csdn.net/sinianliushui/article/details/79895077

将h2jar包放到f盘根目录后 
进入cmd命令行
输入f:
输入 cd jar/
输入java -classpath h2.jar org.h2.tools.Console -web 以web-console方式启动h2数据库
打开浏览器 输入localhost:8082 进入h2图形化界面 

#springboot Thymeleaf学习 
添加Thymeleaf依赖
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>
<dependency>
    <groupId>nz.net.ultraq.thymeleaf</groupId>
    <artifactId>thymeleaf-layout-dialect</artifactId>
</dependency>

页面传参
		 Map<String,Object> map= new HashMap<>();
		 map.put("name", "赵铁柱");
		 map.put("password", "123123");
		 map.put("age", "62");
		 //model添加map 通过map方式传递对象参数
		 model.addAttribute("stu",map);
		 //model中添加string
		 model.addAttribute("name","王大锤");	
		 model.addAttribute("password","626262");	
		 model.addAttribute("age","23");	
		 //model中添加对象
		 model.addAttribute("student",new Student("张全蛋","88888",100));
2019/07/02学习springboot整合jpa

service 及实现类要注意注解是否添加 

本人的错误原因是：entity，service，serviceImpl，controller等这些包
和Application.java SpringBoot程序的入口不在同一个包且不在Application.java的子包中。

原因是：SpringBoot运行时所加载的包是Application.java本包及其子包的代码。所以根本扫描不到其他包，你怎么改注解都是错误的。

2019/07/03学习springboot整合mybatis-plus/h2数据库

h2数据库在内存中生成 项目关闭后数据也随之销毁 比较适用于开发时项目测试

测试学习了 λ表达式作为参数传递java8新特性

springboot mybatis多数据源整合

redis整合(未整合到demo)
2019/07/04
整合redis到bootDemo
打开一个 cmd 窗口 使用cd命令切换目录到 E:\redis 运行 redis-server.exe redis.windows.conf 。
1、 E:\redis
2、 redis-server.exe redis.windows.conf

出现画面后这时候另启一个cmd窗口，原来的不要关闭，不然就无法访问服务端了。

切换到redis目录下运行 redis-cli.exe -h 127.0.0.1 -p 6379 。

设置键值对 set myKey abc

取出键值对 get myKey

1、 cd c:\redis
2、 redis-cli.exe -h 127.0.0.1 -p 6379
3、 set myKey abc
4、 get myKey

查看redis所有keys 
keys *
清除所有key
flush all

mysql建立索引
user表为例  id,userName,userCode,password,createDate,updateDate
#显示所有索引
SHOW INDEX FROM USER;

#创建简单索引

#为userName创建普通索引 
CREATE INDEX NAME ON USER(username); 
#改变表结构方式创建索引
ALTER TABLE USER ADD INDEX CODE(usercode);

#创建唯一约束索引
CREATE UNIQUE INDEX PASSWORD ON USER(PASSWORD);
ALTER TABLE USER ADD UNIQUE createdate (createdate);

#删除索引
DROP INDEX CODE ON USER; 

2019/07/08
springboot整合Quartz框架 实现定时任务 
定时查询，定时插入

查看spring-boot-starter-parent 依赖源码  （内部定义 parent-depencies parent-depencies中定义 jdk编译版本 各jar包版本依赖 配置文件加载等等）

Security 和Shiro的区别
由于 Spring Boot 官方提供了大量的非常方便的开箱即用的 Starter ，包括 Spring Security 的 Starter ，使得在 Spring Boot 中使用 Spring Security 变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是 Spring Boot 项目，一般选择 Spring Security 。当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro 和 Spring Security 相比，主要有如下一些特点：
Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架
Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单
Spring Security 功能强大；Shiro 功能简单

Spring Boot 中针对系统启动任务提供了两种解决方案：
分别是 CommandLineRunner 和 ApplicationRunner
2019/07/09
微服务之间调用 使用RestTemplate组件 

同一类型服务进行转发 使用ngnix f5

Demo整合文件上传功能
整理redis本地批处理
h2数据库批处理启动方式

9. 五种I/O模型介绍

IO 多路复用是5种I/O模型中的第3种，对各种模型讲个故事，描述下区别：

故事情节为：老李去买火车票，三天后买到一张退票。参演人员（老李，黄牛，售票员，快递员），往返车站耗费1小时。

1.阻塞I/O模型

老李去火车站买票，排队三天买到一张退票。

耗费：在车站吃喝拉撒睡 3天，其他事一件没干。
2.非阻塞I/O模型

老李去火车站买票，隔12小时去火车站问有没有退票，三天后买到一张票。

耗费：往返车站6次，路上6小时，其他时间做了好多事。

3.I/O复用模型

1.select/poll

老李去火车站买票，委托黄牛，然后每隔6小时电话黄牛询问，黄牛三天内买到票，然后老李去火车站交钱领票。 

耗费：往返车站2次，路上2小时，黄牛手续费100元，打电话17次

2.epoll
老李去火车站买票，委托黄牛，黄牛买到后即通知老李去领，然后老李去火车站交钱领票。 

耗费：往返车站2次，路上2小时，黄牛手续费100元，无需打电话
4.信号驱动I/O模型

老李去火车站买票，给售票员留下电话，有票后，售票员电话通知老李，然后老李去火车站交钱领票。 

耗费：往返车站2次，路上2小时，免黄牛费100元，无需打电话
5.异步I/O模型

老李去火车站买票，给售票员留下电话，有票后，售票员电话通知老李并快递送票上门。 

耗费：往返车站1次，路上1小时，免黄牛费100元，无需打电话

1同2的区别是：自己轮询

2同3的区别是：委托黄牛

3同4的区别是：电话代替黄牛

4同5的区别是：电话通知是自取还是送票上门
2019/07/10
将本地微服务注册到Springcloud中的Eureka中
添加@LoadBalanced
使用spring组件中的轮循方式 实现负载均衡

Eureka 负载均衡模式
		 return new RoundRobinRule();                 //轮训
       //return new WeightedResponseTimeRule();   	  //加权权重
       //return new RetryRule();                  	  //带有重试机制的轮训
       //return new RandomRule();                  	  //随机
       //return new TestRule();                   	  //自定义规则



正向代理:
我----->vpn----->Google 
Google 并不知道真正访问它的客户端是谁，它只知道这个中间服务器在访问它。
因此，这里的代理，实际上是中间服务器代理了客户端，这种代理叫做正向代理。
反向代理：
我----->10086------->话务员1，话务员2，话务员3
10086 这个号码相当于是一个代理，真正提供服务的，是话务员，但是对于客户来说，
他不关心到底是哪一个话务员提供的服务，他只需要记得 10086 这个号码就行了。
所有的请求打到 10086 上，再由 10086 将请求转发给某一个话务员去处理。
因此，在这里，10086 就相当于是一个代理，只不过它代理的是话务员而不是客户端，这种代理称之为反向代理。例如nginx

