启动WebApplication之前 先修改 resource 中的application.properties文件信息 （端口9090）数据库链接信息等 server.port=9090
springboot启动好之后 地址栏输入访问的链接 如 127.0.0.1:9090/hello

断言：
Assert.assertEquals();方法的作用 ：若括号内两者不一致则中断流程 若一致则向下执行

application.properties(注释and代码)：
server.port=9090
spring.datasource.url=jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=create

#hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建	更新	验证数据库表结构,有四个值：

#1.create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#2.create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
#3.update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#4.validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。


#dialect主要是指定生成表名的存储引擎为 InnoDBD
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#sqlshow
spring.jpa.show-sql=true
#format\u4E00\u4E0Bsql\u8FDB\u884C\u8F93\u51FA
spring.jpa.properties.hibernate.format_sql=true


由于某些原因我们想使用自定义的 SQL 来查询，Spring Data 也是完美支持的；在 SQL 的查询方法上面使用@Query注解，如涉及到删除和修改在需要加上@Modifying.也可以根据需要添加 @Transactional对事物的支持，查询超时的设置等。


2019-6-17 学习笔记
/spring-boot-mybatis-annotation

在 /spring-boot-mybatis-annotation/src/main/java/com/neo/MybatisAnnotationApplication.java 文件中 @MapperScan("com.neo.mapper") 的作用是将com.neo.mapper中的所有mapper映射到boot中



@RequestMapping(value="/delete/{id}")
    public void delete(@PathVariable("id") Long id) {
    	System.out.println(id);
    	userMapper.delete(id);
    	
    }
地址栏 http://127.0.0.1:9090/delete/2        删除id为2的user



/spring-boot-thymeleaf
spring-boot 数据--->前端页面

2019/6/24
/SpringBootTestDemo 自测Demo

@RestController注解相当于@ResponseBody＋ @Controller合在一起的作用。
1)如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面或者html页面
配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return里的内容。

2)如果需要返回到指定页面，则需要用@Controller配合视图解析器InternalResourceViewResolver才行。(在application.properties中配置  spring.thymeleaf.cache=false后 页面返回到templates中)

3)如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。


给自建demo配置mybatis时 添加mapperTest时出现的异常
springboot测试时出现：java.lang.IllegalStateException: 
Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test

原因：未在testresource中添加springboot基础启动类导致报错
是因为我没在根目录下写一个springboot的启动类：写个App.class,再在test测试类跑起来就不会出现这个错误了

/spring-boot-jpa-thymeleaf-curd
spring-boot-jpa-thymeleaf-curd 纯洁的微笑springbootDemo 
使用maven打包之后 拿到jar包放到指定位置 本地进入cmd窗口  （F:\springboot-crud.jar）
cmd窗口运行 java -jar F:\springboot-crud.jar

2019/6/25 servlet学习

2.1 接收单一的值(一个参数名对应一个值)
	String name = request.getParameter("name");
	String age = request.getParameter("age");
	System.out.println(name);
	System.out.println(age);
	
2.2 一个参数名对应多个值(比如多选框)
	String[] like = request.getParameterValues("like");
	System.out.println(Arrays.toString(like));

2.3 获得本次传参中的所有参数名
	Enumeration<String> names = request.getParameterNames();
	while(names.hasMoreElements()){
		String str = names.nextElement();
		System.out.println(str);
	}
		打印结果:
		name
		age
		like

2.4 获得本次传参中的所有参数及对应的值
Map<String, String[]> map = request.getParameterMap();
 for(String key:map.keySet()){
	System.out.println(key+" : "+Arrays.toString(map.get(key)));
 }
	打印结果:
	name : [tom]
	age  : [20]
	like : [0, 1]



服务器内部跳转的特点:
1.需要使用request对象来完成
2.服务器内部跳转期间,其实就是把请求request和响应response转发到一下资源中,所以在整个跳转期间所有涉及到的资源使用的都是同一个request和response。(我们可以利用这个特点将来在多个资源之间进行数据的传递)
3.服务器内部跳转,【不会】改变浏览器地址栏中的地址


3.客户端传参过程中,出现中文乱码
	3.1 get方式传参,中文乱码
		需要在tomcat服务器中server.xml文件中进行配置
		在<Connector>中加入新的属性URIEncoding="XXX"
		<Connector URIEncoding="UTF-8" connectionTimeout="20000" port="8989" protocol="HTTP/1.1" redirectPort="8443"/>

	3.2 post方式传参,中文乱码
		在使用request获取参数【之前】,先把request中的编码进行设置
		request.setCharacterEncoding("UTF-8");
		String name = request.getParameter("name");
		System.out.println(name);
	
	3.3 servlet中使用io流写数据到浏览器,浏览器里面显示中文乱码
		http协议规范中响应的格式为:
		1部分 响应状态行
		2部分 响应头部/消息报头
		3部分 \r\n
		4部分 响应正文

		如果响应头部信息中没有设置编码,那么浏览器会默认使用简体中文(GBK)来解析响应中的内容
		
		所以在使用io流之前,需要设置一下response中的编码,同时还要告诉浏览器本次响应内容的编码是什么
		//设置response中的编码为UTF-8
		response.setCharacterEncoding("UTF-8");
		//设置响应头部,告诉浏览器响应内容编码为utf-8
		response.setContentType("text/html;charset=utf-8");

		// /web_servlet  项目名 "/maven02"
		request.getContextPath();

		// /PathServlet 映射路径"/user/checkboxTest"
		request.getServletPath();

		// 地址栏全地址 统一资源定位符  "http://127.0.0.1:9090/maven02/user/checkboxTest" 
		request.getRequestURL();

		// /web_servlet/PathServlet 统一资源标志符  "/maven02/user/checkboxTest"
		request.getRequestURI();
		
Session:

	代码中设置:session.setMaxInactiveInterval(5); 5秒
	
	web.xml中设置:1分钟超时,负数或者0为 不限制时间
		<session-config>  
				<session-timeout>1</session-timeout>  
		</session-config>
	session超时时间是指:客户端不与服务器进行交互的时间		


Application
application对象
	ServletContext被称为应用上下文/servlet上下文
	生命周期:
		启动tomcat服务器的时候,就会被创建
		关闭tomcat服务器的时候,就会被销毁
		而且每个项目在运行期间,都会有且只有一个application对象

作用范围:整个项目在运行期间,只有一个application对象,所以这个对象是所有用户共享的,大家都可以向这个对象里面存值
,也可以再拿出来.因为这个对象一个项目中只有一个.


		过滤器方法 doFilter 
		public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
		FilterChain是一个接口,表示过滤器链,这个接口中只有一个方法
		public interface FilterChain {
			public void doFilter(ServletRequest request, ServletResponse response)throws IOException, ServletException;
		}
		
		doFilter中传的FilterChain chain 参数代表 实现了FilterChain接口的实现类
在web.xml中设置404页面自动跳转到404.html
			<error-page>
				<error-code>404</error-code>
				<location>/404.html</location>
			</error-page>

16c8jz