启动WebApplication之前 先修改 resource 中的application.properties文件信息 （端口9090）数据库链接信息等 server.port=9090
springboot启动好之后 地址栏输入访问的链接 如 127.0.0.1:9090/hello

断言：
Assert.assertEquals();方法的作用 ：若括号内两者不一致则中断流程 若一致则向下执行

application.properties(注释and代码)：
server.port=9090
spring.datasource.url=jdbc:mysql://localhost:3306/springboot?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.hbm2ddl.auto=create

#hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建	更新	验证数据库表结构,有四个值：

#1.create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#2.create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
#3.update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#4.validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。


#dialect主要是指定生成表名的存储引擎为 InnoDBD
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#sqlshow
spring.jpa.show-sql=true
#format\u4E00\u4E0Bsql\u8FDB\u884C\u8F93\u51FA
spring.jpa.properties.hibernate.format_sql=true


由于某些原因我们想使用自定义的 SQL 来查询，Spring Data 也是完美支持的；在 SQL 的查询方法上面使用@Query注解，如涉及到删除和修改在需要加上@Modifying.也可以根据需要添加 @Transactional对事物的支持，查询超时的设置等。


2019-6-17 学习笔记
/spring-boot-mybatis-annotation

在 /spring-boot-mybatis-annotation/src/main/java/com/neo/MybatisAnnotationApplication.java 文件中 @MapperScan("com.neo.mapper") 的作用是将com.neo.mapper中的所有mapper映射到boot中



@RequestMapping(value="/delete/{id}")
    public void delete(@PathVariable("id") Long id) {
    	System.out.println(id);
    	userMapper.delete(id);
    	
    }
地址栏 http://127.0.0.1:9090/delete/2        删除id为2的user



/spring-boot-thymeleaf
spring-boot 数据--->前端页面

2019/6/24
/SpringBootTestDemo 自测Demo

@RestController注解相当于@ResponseBody＋ @Controller合在一起的作用。
1)如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面或者html页面
配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return里的内容。

2)如果需要返回到指定页面，则需要用@Controller配合视图解析器InternalResourceViewResolver才行。(在application.properties中配置  spring.thymeleaf.cache=false后 页面返回到templates中)

3)如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。


给自建demo配置mybatis时 添加mapperTest时出现的异常
springboot测试时出现：java.lang.IllegalStateException: 
Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test

原因：未在testresource中添加springboot基础启动类导致报错
是因为我没在根目录下写一个springboot的启动类：写个App.class,再在test测试类跑起来就不会出现这个错误了

/spring-boot-jpa-thymeleaf-curd
spring-boot-jpa-thymeleaf-curd 纯洁的微笑springbootDemo 
使用maven打包之后 拿到jar包放到指定位置 本地进入cmd窗口  （F:\springboot-crud.jar）
cmd窗口运行 java -jar F:\springboot-crud.jar











